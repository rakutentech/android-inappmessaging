apply plugin: 'org.sonarqube'

def branch = System.getenv("BITRISE_GIT_BRANCH")
def baseBranch = 'master'

sonarqube {
    properties {
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.projectName', 'Android In-App Messaging SDK'
        property 'sonar.host.url', System.getenv("SONARQUBE_HOST_URL")
        property 'sonar.login', System.getenv("SONARQUBE_TOKEN")
        property 'sonar.projectKey', System.getenv("SONARQUBE_PROJ_KEY")
        property 'sonar.projectVersion', scmVersion.version
        if (branch == baseBranch || branch == "" || !branch) {
            property 'sonar.branch.name', baseBranch
        } else {
            property 'sonar.pullrequest.key', System.getenv("BITRISE_PULL_REQUEST").findAll(/\d+/)*.toInteger().last()
            property 'sonar.pullrequest.branch', branch
            property 'sonar.pullrequest.base', baseBranch
        }
        property 'sonar.qualitygate.wait', true

        /* Dependency Check */
        property 'sonar.dependencyCheck.skip', System.getenv("SONAR_DEPENDENCYCHECK_SKIP")
        property 'sonar.dependencyCheck.jsonReportPath', 'build/reports/dependency-check-report.json'
        property 'sonar.dependencyCheck.htmlReportPath', 'build/reports/dependency-check-report.html'
        /* Dependency Check severity minimum score */
        property 'sonar.dependencyCheck.severity.blocker', System.getenv("DEPENDENCY_CHECK_FAILBUID_CVSS")
        property 'sonar.dependencyCheck.severity.critical', System.getenv("DEPENDENCY_CHECK_FAILBUID_CVSS")
        property 'sonar.dependencyCheck.severity.major', System.getenv("DEPENDENCY_CHECK_FAILBUID_CVSS")
        property 'sonar.dependencyCheck.severity.minor', System.getenv("DEPENDENCY_CHECK_FAILBUID_CVSS")
    }
}

subprojects { subproject ->
    sonarqube {
        properties {
            property 'sonar.sources', 'src'
            property 'sonar.exclusions',    '**/test/**, ' +
                                            '**/*Generated.java, ' +
                                            'build/**, ' +
                                            '*.json, ' +
                                            '**/*test*/**, ' +
                                            '**/.gradle/**, ' +
                                            '**/R.class'
            property 'sonar.test.inclusions', '**/test/**'
            property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/jacocoReleaseReport/jacocoReleaseReport.xml'
            property 'sonar.junit.reportPaths', 'build/test-results/testReleaseUnitTest'
        }
    }
}

// test module is a sample app to test inappmessaging library,
// and should be excluded from analysis
project(':test') {
    sonarqube {
        skipProject = true
    }
}

// the analytics module doesn't includes code sources,
// and should be excluded from analysis
project(':analytics') {
    sonarqube {
        skipProject = true
    }
}