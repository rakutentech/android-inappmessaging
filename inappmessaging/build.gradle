apply from: '../config/android/library.gradle'
apply from: "../config/quality/checkstyle/android.gradle"
apply from: "../config/quality/detekt/android.gradle"
apply from: '../config/quality/errorprone/android.gradle'
apply from: '../config/documentation/dokka/android.gradle'

apply plugin: "kotlin-android"

android {
  defaultConfig {
    resValue 'string', 'inappmessaging__version', project.version
    versionName version
    consumerProguardFiles 'proguard-rules.pro'
    manifestPlaceholders.config_url = CONFIG.property("CONFIG_URL_TEST_PROD") ?: ""
    manifestPlaceholders.test_sub_key = CONFIG.property("IAM_TEST_SUBSCRIPTION_KEY") ?: "test_sub_key"
    buildConfigField("boolean", "IS_CACHE_HANDLING", "true")
  }

  sourceSets.each {
    it.java.srcDirs += "src/$it.name/kotlin"
  }

  compileOptions {
    // Source code java level(Source code of this project).
    sourceCompatibility JavaVersion.VERSION_1_8
    // Target JVM level(JVM on Android devices).
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8.toString()
  }

  testOptions {
    unitTests {
      returnDefaultValues = true
      includeAndroidResources = true
    }
  }

  dexOptions {
    javaMaxHeapSize = 6g
    maxProcessCount = 8
    threadCount = 8
  }

  buildTypes {
    release {
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  // For Kotlin
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$CONFIG.versions.kotlin"
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

  implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
  implementation 'androidx.work:work-runtime:2.7.0'
  implementation("androidx.work:work-runtime-ktx:2.7.0")
  implementation 'com.google.android.material:material:1.2.1'
  implementation 'com.jakewharton.timber:timber:4.7.1'
  implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
  implementation 'com.squareup.retrofit2:retrofit:2.8.1'
  implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
  implementation 'com.google.code.gson:gson:2.8.6'
  implementation "com.squareup.picasso:picasso:2.71828"

  // Doclava needs an annotation class from this package (used by Retrofit)
  compileOnly 'org.codehaus.mojo:animal-sniffer-annotations:1.18'

  compileOnly project(":analytics")

  testImplementation "org.amshove.kluent:kluent-android:1.65"
  testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
  testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.9'
  testImplementation 'androidx.test.ext:junit:1.1.3'
  testImplementation 'androidx.test:core:1.4.0'
  testImplementation 'androidx.test:runner:1.4.0'
  testImplementation 'androidx.work:work-testing:2.7.0'
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.mockito:mockito-core:3.11.2'
  testImplementation 'org.robolectric:robolectric:4.5.1'
  testImplementation "com.facebook.soloader:soloader:0.9.0"
  testImplementation "com.squareup.okhttp3:mockwebserver:3.14.7"

  detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.1.1"
}

task checkUrlPrefixes {
  doLast {
    if (System.env.CI && System.env.CIRCLECI) {
      println "Allow empty URL prefixes for config APIs on CI & circleCI build jobs"
    } else if (!project.hasProperty('CONFIG_URL')) {
      throw new GradleException("Cannot Bulid Runtime without default config prexfixes. Configure 'CONFIG_URL' in your environment's global gradle.properties")
    }
  }
}

checkstyle { // we rely on automated code formatting instead
  ignoreFailures true
}

import com.android.build.gradle.internal.tasks.PrepareLintJar
tasks.whenTaskAdded { task ->
  switch (task) {
    case PrepareLintJar:
      task.dependsOn ":${project.name}:reformatJavaSources"
      break
  }
}

tasks.withType(JavaCompile).configureEach {
  options.errorprone.disableWarningsInGeneratedCode = true
  options.errorprone.enabled = false // change it to true to enable
}

apply from: '../config/publish/android.gradle'
afterEvaluate {
  publishing {
    publications {
      inappmessaging(MavenPublication, androidArtifact())
    }
  }
}

def isSnapshot = project.version.contains('-')
if (isSnapshot) {
  project.ext.ARTIFACTORY_URL=CONFIG.property("ARTIFACTORY_URL_SNAPSHOT")
  project.ext.ARTIFACTORY_REPO=CONFIG.property("ARTIFACTORY_REPO_SNAPSHOT")
  apply from: '../config/publish/artifactory.gradle'
} else {
  apply from: '../config/publish/maven-central.gradle'
}

dokka {
  configuration {
    sourceRoot {
      path = "inappmessaging/src/main"
    }
  }
}

apply from: "../config/quality/jacoco/android.gradle"
jacoco {
  toolVersion = "0.8.3"
}