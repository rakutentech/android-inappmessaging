apply from: '../config/android/library.gradle'
apply from: '../config/quality/android.gradle'
apply from: "../config/quality/detekt/android.gradle"
apply from: '../config/quality/errorprone/android.gradle'
apply from: '../config/documentation/dokka/android.gradle'

apply plugin: "kotlin-android"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
  defaultConfig {
    versionName version
    consumerProguardFiles 'proguard-rules.pro'
    // This is how user enter config url during build time.
    def property = { key ->
      return System.getenv(key) ?: (project.hasProperty(key) ? project."$key" : null)
    }
    manifestPlaceholders.config_url = property("CONFIG_URL") ?: ""
  }

  sourceSets.each {
    it.java.srcDirs += "src/$it.name/kotlin"
  }

  compileOptions {
    // Source code java level(Source code of this project).
    sourceCompatibility JavaVersion.VERSION_1_8
    // Target JVM level(JVM on Android devices).
    targetCompatibility JavaVersion.VERSION_1_8
  }

  testOptions {
    unitTests {
      returnDefaultValues = true
      includeAndroidResources = true
    }
  }

  dexOptions {
    javaMaxHeapSize = 6g
    maxProcessCount = 8
    threadCount = 8
  }

  buildTypes {
    release {
      useProguard true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  // For Kotlin
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$CONFIG.versions.kotlin"
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'

  implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
  implementation 'androidx.work:work-runtime:2.3.3'
  implementation 'com.facebook.fresco:animated-gif:2.0.0'
  implementation 'com.facebook.fresco:fresco:2.0.0'
  implementation 'com.google.android.material:material:1.1.0'
  implementation 'com.jakewharton.timber:timber:4.7.1'
  implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
  implementation 'com.squareup.retrofit2:retrofit:2.7.1'
  implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
  implementation 'com.rakuten.tech.mobile:manifest-config-annotations:0.1.0'
  kapt 'com.rakuten.tech.mobile:manifest-config-processor:0.1.0'

  // DocLava needs the javax.annotations.Nullable class (used by Retrofit), so findbugs is added
  // to bring this to the classpath: https://stackoverflow.com/a/19031259
  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
  // Doclava needs an annotation class from this package (used by Retrofit)
  compileOnly 'org.codehaus.mojo:animal-sniffer-annotations:1.18'

  testImplementation "org.amshove.kluent:kluent-android:1.58"
  testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
  testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.2-1.3.60'
  testImplementation 'androidx.test.ext:junit:1.1.1'
  testImplementation 'androidx.test:core:1.2.0'
  testImplementation 'androidx.test:runner:1.2.0'
  testImplementation 'androidx.work:work-testing:2.3.3'
  testImplementation 'junit:junit:4.13'
  testImplementation 'org.mockito:mockito-core:3.2.4'
  testImplementation 'org.robolectric:robolectric:4.3.1'
  testImplementation "com.facebook.soloader:soloader:0.8.2"

  detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.1.1"
  if(!JavaVersion.current().java9Compatible) {
    // see https://github.com/tbroyer/gradle-errorprone-plugin#jdk-8-support
    errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
  }
  errorprone 'com.google.errorprone:error_prone_core:2.3.2'
}

task checkUrlPrefixes {
  doLast {
    if (System.env.CI && System.env.CIRCLECI) {
      println "Allow empty URL prefixes for config APIs on CI & circleCI build jobs"
    } else if (!project.hasProperty('CONFIG_URL')) {
      throw new GradleException("Cannot Bulid Runtime without default config prexfixes. Configure 'CONFIG_URL' in your environment's global gradle.properties")
    }
  }
}

checkstyle { // we rely on automated code formatting instead
  ignoreFailures true
}

import com.android.build.gradle.internal.tasks.PrepareLintJar
tasks.whenTaskAdded { task ->
  switch (task) {
    case PrepareLintJar:
      task.dependsOn ":${project.name}:reformatJavaSources"
      break
  }
}

tasks.withType(JavaCompile).configureEach {
  options.errorprone.disableWarningsInGeneratedCode = true
  options.errorprone.enabled = false // change it to true to enable
}

apply from: '../config/publish/android.gradle'
publishing {
  publications {
    // Add publish tasks to SSED Artifactory.
    inappmessaging(MavenPublication, androidArtifact())
  }
}

dokka {
  configuration {
    sourceRoot {
      path = "inappmessaging/src"
    }
  }
}