// Reduce code duplication.
apply from: "$CONFIG.configDir/android/application.gradle"
apply from: "../config/quality/gitleaks/build.gradle"
apply plugin: "kotlin-android"
apply plugin: 'kotlin-kapt'
apply plugin: 'com.emergetools.android'

android {
    compileSdkVersion 31

    def property = { key ->
        return System.getenv(key) ?: (project.hasProperty(key) ? project."$key" : null)
    }

    defaultConfig {
        applicationId "rakuten.com.tech.mobile.test"
        versionCode 2
        versionName "0.0"
        // Defines the minimum API level required to run the app.
        minSdkVersion CONFIG.versions.android.sdk.min
        // Specifies the API level used to test the app.
        targetSdkVersion 31

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        manifestPlaceholders.in_app_messaging_sub_id = property("IAM_SUBSCRIPTION_KEY") ?: ""
        manifestPlaceholders.config_url = property("CONFIG_URL_TEST_PROD") ?: ""
    }

    buildTypes {
        release {
            debuggable true
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }

    flavorDimensions 'version'
}

dependencies {
    implementation project(':inappmessaging')
    implementation "io.github.rakutentech.sdkutils:sdk-utils:1.1.0"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$CONFIG.versions.kotlin"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.core:core-ktx:1.3.0"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
}
repositories {
    mavenCentral()
}

def pr = System.getenv("PULL_REQUEST_ID")

emerge {
    apiToken = System.getenv("EMERGE_API_TOKEN")

    vcsOptions {
        sha = System.getenv("BITRISE_GIT_COMMIT")
        branchName = System.getenv("BITRISE_GIT_BRANCH")

        if (pr == "" || !pr) {
            // not pull request build
            baseSha = System.getenv("BITRISE_GIT_COMMIT")
            prNumber = ""
            // for getting repo used in pull request
            // need better way to retrieve owner/repo value
            repoName = System.getenv("BITRISEIO_BASE_REPOSITORY_URL").replace(".git", "").replace("https://github.com/", "")
        } else {
            // for getting SHA in destination branch
            def command = "git ls-remote ${System.getenv("BITRISEIO_BASE_REPOSITORY_URL")} ${System.getenv("BITRISEIO_GIT_BRANCH_DEST")}"

            baseSha = ['sh', '-c', command].execute().text.trim().split("\t")[0]
            prNumber = pr
            repoName = System.getenv("BITRISEIO_PULL_REQUEST_REPOSITORY_URL").replace(".git", "").replace("https://github.com/", "")
        }
    }
}
