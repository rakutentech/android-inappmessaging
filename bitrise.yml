format_version: 11
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: android
trigger_map:
- push_branch: "master"
  workflow: build-and-test
- push_branch: release/*
  workflow: build-and-test
- pull_request_source_branch: "*"
  pull_request_target_branch: "master"
  workflow: build-and-test
- pull_request_source_branch: "*"
  pull_request_target_branch: release/*
  workflow: build-and-test
- tag: "v*.*.*+*"
  workflow: build-and-test
- tag: "v*.*.*"
  workflow: release
workflows:
  build-and-test:
    before_run:
    - _setup-env
    - _common-start
    after_run:
    - _common-end
    steps:
    - cache-pull@2: {}
    - script@1:
        title: Run some verification tasks
        inputs:
        - content: "./gradlew detekt detektRelease lintAnalyzeDebug lintDebug lintReportDebug testDebugUnitTest jacocoDebugReport"
    - custom-test-results-export@0:
        inputs:
        - test_name: "${SDK_PATH}_debug"
        - base_path: "$SDK_PATH/build/test-results/testDebugUnitTest/"
        - search_pattern: "*"
  integration-test:
    before_run:
    - _setup-env
    steps:
    - script@1:
        title: Dependency Check
        inputs:
        - content: ./gradlew dependencyCheckAggregate
    - script@1:
        title: Run Tests
        inputs:
        - content: ./gradlew clean testRelease --tests com.rakuten.tech.mobile.inappmessaging.runtime.integration.IntegrationSpec
    - custom-test-results-export@0:
        inputs:
        - test_name: Integration Tests
        - base_path: "$SDK_PATH/build/test-results/testReleaseUnitTest/"
        - search_pattern: "*"
    - deploy-to-bitrise-io@2:
        inputs:
        - deploy_path: "$SDK_PATH/build/test-results/testReleaseUnitTest/"
        - is_enable_public_page: 'false'
    - slack@3:
        inputs:
        - channel: ''
        - webhook_url: "$SLACK_CHANNEL_WEBHOOK"
        - text: ''
        - title: ''
        - author_name: ''
        - channel_on_error: ''
        - pretext: ''
        - pretext_on_error: ''
        - message_on_error: |+
            $BITRISE_APP_TITLE » $BITRISE_TRIGGERED_WORKFLOW_TITLE - #$BITRISE_BUILD_NUMBER *Failure*
            <$BITRISE_BUILD_URL|Open>
        - message: |+
            $BITRISE_APP_TITLE » $BITRISE_TRIGGERED_WORKFLOW_TITLE - #$BITRISE_BUILD_NUMBER *Success*
            <$BITRISE_BUILD_URL|Open>
        - fields: ''
        - buttons: ''
        - footer: ''
        - footer_icon: ''
        - timestamp: 'no'
        - icon_url_on_error: ''
        - from_username_on_error: ''
        - color_on_error: "#d10b20"
  release:
    before_run:
    - _setup-env
    - _common-start
    after_run:
    - _common-end
    - _post_discourse
    - _publish-doc
    - _create-github-release
    steps:
    - script@1:
        title: Run Check
        inputs:
        - content: "./gradlew check"
    - script@1:
        title: Assemble
        inputs:
        - content: "./gradlew assemble"
    - script@1:
        title: Current Version
        inputs:
        - content: "./gradlew currentVersion"
    - custom-test-results-export@0:
        inputs:
        - test_name: "${SDK_PATH}_release"
        - base_path: "$SDK_PATH/build/test-results/testReleaseUnitTest/"
        - search_pattern: "*"
    - script@1:
        title: Retrieve Base64 PGP Key and save to file
        inputs:
        - content: |-
            if [[ "$RELEASE_PGP_KEY_BASE64" != "" ]]; then
              base64 -d <<< "$RELEASE_PGP_KEY_BASE64" > ./maven-central-key.gpg
            fi
    - script@1:
        title: Publish Artifacts
        inputs:
        - content: ./gradlew publish
  _setup-env:
    steps:
    - set-java-version@1:
        inputs:
        - set_java_version: '11'
    - git-clone@6:
        inputs:
        - fetch_tags: 'yes'
        - merge_pr: 'no'
        - update_submodules: 'yes'
  _publish-doc:
    steps:
    - script@1:
        title: Publish Documentation
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            ./gradlew generatePublishableDocs
            if [[ ! $BITRISE_GIT_TAG == *"-"* ]]; then
              git fetch --no-tags origin gh-pages
              git checkout gh-pages
              cp -R inappmessaging/build/publishableDocs/docs/. ./docs
              cp -R inappmessaging/build/publishableDocs/_versions/. ./_versions
              git add docs _versions
              git config user.name "CI Publisher"
              git config user.email "dev-opensource@mail.rakuten.com"
              git commit -m "Publish documentation for $BITRISE_GIT_TAG"
              git config url."https://x-token-auth:$PUBLISHER_GITHUB_API_TOKEN@github.com".insteadOf https://github.com
              git push origin gh-pages
            else
             echo "Documentation not published for snapshot version"
            fi
  _run-sonarqube-scanner:
    steps:
    - script@1:
        title: Prepare branches to feed in sonar.gradle
        description: This step ensures that source and destination branches exist. For sonarqube to work, the current working branch should be the source branch.
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            if [[ $BITRISE_GIT_TAG != "" ]]; then
              echo "Branch analysis but using tag name. BITRISE_GIT_TAG=$BITRISE_GIT_TAG"
              git fetch --no-tags origin $BITRISE_GIT_TAG
              git checkout $BITRISE_GIT_TAG
            elif [[ $BITRISEIO_PULL_REQUEST_REPOSITORY_URL == "" ]]; then
              echo "Normal branch analysis. BITRISE_GIT_BRANCH=$BITRISE_GIT_BRANCH"
              git fetch --no-tags origin $BITRISE_GIT_BRANCH
              git switch $BITRISE_GIT_BRANCH
            else
              # PR analysis
              git fetch --no-tags origin $BITRISEIO_GIT_BRANCH_DEST
              echo "PR analysis. BITRISEIO_GIT_BRANCH_DEST=$BITRISEIO_GIT_BRANCH_DEST. BITRISE_GIT_BRANCH=$BITRISE_GIT_BRANCH"
              if [[ $BITRISEIO_PULL_REQUEST_REPOSITORY_URL != "" && \
                $GIT_REPOSITORY_URL != $BITRISEIO_PULL_REQUEST_REPOSITORY_URL ]]; then
                # Fork
                git switch -C $BITRISE_GIT_BRANCH
              else
                # Non-fork
                git fetch --no-tags origin $BITRISE_GIT_BRANCH
                git switch $BITRISE_GIT_BRANCH
              fi    
            fi
    - script@1:
        run_if: '{{getenv "SONARQUBE_TOKEN" | ne ""}}'
        title: Run SonarQube Scanner
        inputs:
        - content: ./gradlew sonarqube
  _post_discourse:
    steps:
    - script@1:
        run_if: false
        title: Post To Discourse
        inputs:
        - content: |-
            #!/usr/bin/env
            ./post-to-discourse.sh $BITRISE_GIT_TAG
  _common-start:
    steps:
    - cache-pull@2: {}
    - script@1:
        title: Run Dependency Check
        inputs:
        - timeout: 1800
        - content: "./gradlew dependencyCheckAggregate"
  _common-end:
    after_run:
    - _run-sonarqube-scanner
    steps:
    - script@1:
        title: Danger
        run_if: '{{enveq "RUN_DANGER" "true"}}'
        inputs:
        - content: |-
            bundle install
            bundle exec danger --dangerfile=config/danger/Dangerfile
    - deploy-to-bitrise-io@2: {}
    - cache-push@2:
        inputs:
        - cache_paths: |-
            $HOME/.gradle
            ./.gradle
            $HOME/.m2
        - ignore_check_on_paths: |-
            $HOME/.gradle/caches/*.lock
            ./.gradle/*.lock
            ./.gradle/*.bin
  _create-github-release:
    steps:
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            # Ensure we are at the right location where the userguide is (not in other branch such as `gh-pages`)
            git checkout $BITRISE_GIT_TAG

            RELEASE_VER_RAW=$BITRISE_GIT_TAG
            RELEASE_VER_RAW="${RELEASE_VER_RAW/v}"

            awk "
            /## $RELEASE_VER_RAW/{flag=1;next}
            /## [0-9]/{flag=0}
            flag
            " $USERGUIDE_PATH > _releasenotes.md

            RELEASE_NOTES=$(cat _releasenotes.md)
            envman add --key RELEASE_NOTES --value "$RELEASE_NOTES"
    - github-release@0.11.0:
        inputs:
        - body: "$RELEASE_NOTES"
        - draft: 'no'
        - username: "$GITHUB_BOT_USERNAME"
        - api_token: "$GITHUB_BOT_API_TOKEN"
        - name: "$BITRISE_GIT_TAG"
meta:
  bitrise.io:
    stack: linux-docker-android-20.04
    machine_type_id: elite
app:
  envs:
  - opts:
      is_expand: false
    SDK_PATH: inappmessaging